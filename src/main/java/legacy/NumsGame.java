package legacy;

import java.util.Arrays;

/**
 * @author liyang
 * @date 2024-02-21 15:51
 */
public class NumsGame {

    /**
     * 这个解法超时了
     */
    public static int[] numsGame(int[] nums) {
//        if (nums.length == 1) {
//            return new int[]{0};
//        }
        long count = 0;
        int[] res = new int[nums.length];
//        for (int i = 1; i < nums.length; i++) {
        for (int i = 0; i < nums.length; i++) {
            // 只要第一个元素确定了，后续的值也已经确定了 nums[0]+i，由于是总操作数，还需要加上上一步的操作数，但是上一步的值是余数，不能直接相加。
            // 按照题目要求取余
//            res1[i] = (Math.abs(nums[i] - (nums[0] + i)) + res1[i - 1]) % 1000000007;
            // 上面的解法没有准确理解题目的要求，要求的是最小的操作数，并非是第一个元素确定后面的值也确定，因为可以减小第一个元素，这样就涉及到两种模式的比较
            // 考虑第一个值减1，那么后续值应为 nums[0]-1+i，应根据最后一个元素，即总操作数来决定返回哪一个数组。
//            res2[i] = (Math.abs(nums[i] - (nums[0] - 1 + i)) + res2[i - 1]) % 1000000007;

            // 不对，是动态决定的，每一步记录的是局部最优解
//            res1[i] = Math.abs(nums[i] - (nums[0] + i)) + res1[i - 1];
//            res2[i] = Math.abs(nums[i] - (nums[0] - 1 + i)) + res2[i - 1];
//            res[i] = Math.min(res1[i], res2[i]);
            // 上面的也不对！第一个值并不能确定整个数组，因为base可能不是第一个元素，如果每次循环都要遍历一遍的话，那复杂度就是n^2，不是n!，每一步是相加的关系。
            // 元素之间的差是1，求最小的操作数。
            // 每次求的都是全局最小值，难点在于当前所求最小的操作数与上一次的最小操作数无关
            // 1.首先确定目标，第i个位置对应的所有满足元素之间差为1的情况有多少种？有i种，每一种都是以k为基准,对应的第j个位置的值为nums[k] - (k - j)，k左侧即k-j>0,值减1，反之加1
            for (int k = 0; k <= i; k++) {
                int temp = 0;
                for (int j = 0; j <= i; j++) {//注意这里是等号
//                    temp += Math.abs(nums[j] - (nums[k] + j - ((k == 0) ? 0 : Math.abs(nums[k] - nums[0]) - 1)));
                    temp += Math.abs(nums[j] - (nums[k] - (k - j)));
                    count++;
                }
                if (k == 0) {
                    res[i] = temp;
                } else {
                    res[i] = Math.min(res[i], temp);
                }
            }
            res[i] = res[i] % 1000000007;
        }
//        if (res[nums.length - 1] > 1000000007){
//            for (int i = 0; i < res.length; i++) {
//                res[i] = res[i] % 1000000007;
//            }
//        }
        System.out.println(count);
        return res;
    }

    /**
     * 记录上一次的计算结果，虽然循环次数减半了，还是超时
     */
    public static int[] numsGame1(int[] nums) {
        int[] res = new int[nums.length];
        int[] acc = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int temp = 0;
            for (int k = 0; k <= i; k++) {
                // 应当利用上一步执行的结果
                temp = i == 0 ? temp : acc[k];
                // 只有第一次是循环，后面都只求第i个
                for (int j = temp == 0 ? 0 : i; j <= i; j++) {
                    temp += Math.abs(nums[j] - (nums[k] - (k - j)));
                }
                acc[k] = temp;
                if (k == 0) {
                    res[i] = temp;
                } else {
                    res[i] = Math.min(res[i], temp);
                }
            }
            res[i] = res[i] % 1000000007;
        }
        return res;
    }

    /**
     * 增加一些判断跳过一些计算，还是超时，问题的规模并没有减小
     */
    public static int[] numsGame2(int[] nums) {
        int[] res = new int[nums.length];
        // 累加k序列的操作总和
        int[] acc = new int[nums.length];
        long count = 0;
        for (int i = 1; i < nums.length; i++) {
            for (int k = 0; k <= i; k++) {
                int temp = acc[k];
                // 增加一些判断跳过一些计算
                if(temp >= res[i] && res[i] != 0){
                    continue;
                }
                // 这里看似套了3个循环，但其实只有在k序列第一次出现时才会循环i次，那么前面的i-1次只需从acc中累计即可，实际时间复杂度是O(n^2)
                for (int j = temp == 0 ? 0 : i; j <= i; j++) {
                    temp += Math.abs(nums[j] - (nums[k] - (k - j)));
                    count++;
                }
                acc[k] = temp;
                if (k == 0) {
                    res[i] = temp;
                } else {
                    res[i] = Math.min(res[i], temp);
                }
            }
            res[i] = res[i] % 1000000007;
        }
        System.out.println(count);
        return res;
    }



    public static void main(String[] args) {
//        int[] nums = new int[]{3,4,5,1,6,7};
//        int[] nums = new int[]{1,2,3,4,5};
//        int[] nums = new int[]{471,626,848};//0, 154, 375
//        int[] nums = new int[]{1, 1, 1, 2, 3, 4};//1,2,3,4,5,6
        int[] nums = new int[]{471,626,848,957,788};//1,2,3,4,5,6
//        int[] nums = new int[]{644,603,151,784,902,754,261,850,8,680,550,510,391,346,218,187,954,30,537,235,350,930,310,441,118,764,980,859,86,916,526,706,653,358,409,835,952,738,887,236,17,825,51,226,921,791,279,486,428,171,859,853,384,238,436,878,653,338,996,220,1,434,835,897,407,938,848,849,162,777,774,658,80,273,729,648,372,360,764,221,730,781,358,928,415,606,415,435,142,317,172,115,433,318,274,116,223,339,495,67,409,119,225,574,515,34,56,935,650,507,252,499,456,352,905,801,18,695,635,31,36,527,585,222,513,942,620,691,307,305,218,760,713,102,158,601,952,186,554,266,518,556,239,912,860,800,512,828,97,123,435,836,830,670,378,601,589,486,346,467,771,784,720,66,33,545,119,926,711,846,471,633,212,236,502,714,771,507,110,1000,998,690,127,576,760,180,284,197,451,264,404,906,627,262,664,380,786,894,25,256,894,76,769,792,672,990,283,933,10,596,888,600,852,385,97,932,208,437,311,649,209,623,821,629,479,479,775,305,966,540,238,297,996,167,331,917,374,763,921,326,614,407,329,466,669,71,681,452,789,95,832,589,156,747,799,770,960,561,758,71,100,386,108,129,193,86,184,540,786,346,682,465,681,742,443,162,385,174,649,835,243,456,639,742,411,241,35,934,811,607,165,167,853,949,123,625,759,313,605,233,950,899,352,190,836,261,533,153,215,83,352,556,661,576,604,595,566,543,167,198,512,800,840,590,432,385,299,294,494,621,114,57,946,972,121,605,758,437,671,892,900,122,202,14,561,34,793,359,1000,416,771,865,241,768,616,672,731,630,305,244,146,73,635,815,167,321,516,327,386,277,829,947,115,2,291,960,688,755,389,555,895,742,717,274,123,480,584,970,666,267,325,583,924,887,1,16,141,731,52,198,83,430,357,939,806,445,228,670,379,124,316,633,703,159,156,926,6,727,961,381,2,825,795,356,384,319,327,345,210,19,895,989,875,664,586,75,186,565,134,519,820,224,52,445,433,959,170,74,465,329,183,890,142,424,923,855,631,341,428,150,73,923,668,926,128,196,918,267,41,443,823,856,498,860,1000,518,25,60,776,489,630,750,709,187,755,26,674,369,490,143,578,891,54,398,780,970,181,542,792,798,146,84,288,2,126,128,476,803,907,197,544,499,878,33,146,298,269,319,50,401,37,741,312,943,953,731,962,735,633,467,797,910,697,768,137,697,894,14,818,300,51,533,669,384,63,198,422,683,655,403,352,895,912,661,357,465,405,756,979,695,650,373,447,42,588,461,767,381,632,887,703,394,204,207,134,55,840,844,206,691,162,462,480,448,99,32,850,524,478,962,661,47,640,892,755,975,997,451,20,328,580,507,22,500,748,855,671,19,788,829,462,809,903,12,124,6,390,871,693,276,282,991,771,71,660,300,805,8,702,948,618,308,701,560,695,806,269,946,919,493,982,554,257,580,525,369,798,122,470,621,746,824,169,434,871,180,478,621,113,448,868,842,288,655,209,517,937,368,502,612,155,561,350,662,80,119,227,123,423,219,657,326,200,486,374,344,813,550,399,34,614,622,690,253,953,237,769,315,422,542,333,526,803,911,828,479,809,135,253,417,644,432,45,894,909,299,651,729,698,803,703,667,882,416,90,51,690,539,765,254,693,710,457,592,721,205,206,98,334,488,908,99,925,476,109,139,896,624,313,354,803,271,890,784,99,738,461,100,105,573,704,627,63,28,950,315,114,920,501,946,875,997,210,848,627,729,855,915,622,531,328,717,145,707,845,351,802,575,385,539,49,369,885,875,696,440,317,386,510,239,527,614,124,127,276,414,209,293,734,673,525,991,528,112,734,970,649,843,895,603,101,106,554,821,687,53,419,832,177,332,91,825,500,30,839,328,496,830,4,193,960,180,793,789,780,175,799,921,144,871,792,453,745,455,586,198,764,595,380,828,274,808,329,649,675,931,973,751,508,670,581,572,489,591,218,36,338,304,482,11,678,911,348,646,949,255,157,49,736,937,716,368,778,157,337,655,742,597,575,164,920,120,289,332,418,837,24,216,93,429,720,836,753,923,590,987,488,730,582,994,184,934,191,902,625,307,561,706,900,614,226,722,213,140,640,1000,454,730,208,627,366,31,236,427,130,677,727,425,369,286,422,169,304,400,88,457,435,789,355,629,608,114,703,670,201,834,307,591,112,890,647,580,339,445,320,144,996,850,124,237,453,124,636,651,800,446,567,749,236,362,430,280,11,933,199,311,461,1,890,238,232,661,556,445,445,425,799,237,672,7,78,265,944,783,977,39,754,960,180,487,632,866,922,715,154,532,251,528,390,995,97,459,279,129,282,462,825,907,418,757,280,488,91,109,738,873,967,27,222,867,44,253,887,39,289,257,161,119,533,561,105,67,670,505,667,249,676,914,928,34,11,399,868,666,325,329,152,451,853,79,809,289,579,70,167,16,543,239,417,314,364,341,82,144,392,516,129,953,921,320,224,69,671,859,504,74,52,343,969,440,850,18,605,802,95,800,731,11,837,863,820,957,616,751,709,71,552,700,136,716,268,434,380,903,761,709,147,523,284,464,839,105,415,217,413,550,295,94,354,712,674,332,934,691,280,868,658,176,102,393,138,839,68,337,187,63,615,851,197,581,370,535,77,912,275,933,778,137,42,301,73,886,475,61,270,485,716,139,614,128,393,49,265,624,808,960,406,857,479,305,321,150,940,968,467,497,112,221,915,4,435,984,944,569,199,393,72,705,674,211,767,931,443,526,316,97,704,2,134,929,875,642,31,964,593,324,55,470,122,454,66,619,148,970,573,206,500,221,455,402,883,595,529,126,672,529,162,620,806,821,157,77,466,991,942,870,752,26,14,863,606,55,657,28,653,657,534,897,321,390,296,749,454,38,862,290,813,74,52,973,542,533,914,531,253,982,167,294,76,433,613,587,99,733,629,407,291,418,573,562,428,911,157,766,653,300,648,849,529,420,368,510,999,581,969,500,763,610,801,749,183,513,369,5,444,191,847,509,967,938,568,747,298,608,871,659,918,201,273,491,981,594,872,179,676,465,15,608,420,663,205,143,410,888,427,606,223,431,735,574,732,426,751,258,612,594,584,859,996,784,439,150,357,21,751,455,987,284,514,955,630,211,724,843,562,643,707,546,312,815,472,458,650,321,395,253,292,539,324,56,976,107,423,536,681,711,176,455,349,650,301,10,930,393,709,554,38,993,689,289,678,793,644,745,257,540,228,698,723,826,353,856,620,503,514,492,389,429,830,869,59,787,686,575,625,557,455,413,185,710,234,135,147,401,751,957,539,815,311,180,667,454,965,50,612,461,185,775,442,342,14,852,641,684,318,45,507,845,53,335,12,184,372,289,172,740,845,721,671,661,391,153,699,795,881,717,225,90,385,376,375,448,507,222,413,331,156,500,577,611,698,893,551,974,792,600,444,382,957,306,755,851,672,758,688,12,804,873,934,303,296,770,809,647,213,799,140,633,182,803,409,130,446,39,698,132,215,138,281,292,445,795,822,433,152,309,712,844,247,708,793,555,556,149,763,193,639,822,990,616,5,283,892,700,120,348,825,521,243,843,494,561,188,527,15,132,607,573,67,662,246,871,939,924,255,950,457,537,367,350,841,920,82,198,331,571,967,847,656,431,217,856,374,493,645,667,786,757,113,308,741,622,42,310,197,308,337,905,71,938,289,789,580,911,268,86,337,215,103,850,698,860,507,218,109,234,492,679,569,872,285,397,382,127,663,786,939,678,80,352,766,670,333,171,33,582,374,721,250,136,341,748,388,114,326,310,402,473,505,443,253,71,398,188,418,332,79,488,924,981,901,366,341,846,921,330,274,721,681,283,383,844,527,673,784,556,953,579,331,498,917,73,125,212,157,585,665,424,481,698,70,983,836,485,962,507,374,786,317,712,72,691,932,921,438,907,464,341,781,877,724,366,224,230,50,480,995,562,792,694,17,854,547,759,64,656,401,641,219,562,437,342,555,785,464,959,745,194,866,961,264,447,494,865,771,636,506,389,299,70,580,418,919,954,446,202,630,898,542,420,107,617,684,698,544,461,13,990,26,384,694,63,80,393,723,474,35,656,622,91,742,244,784,629,613,640,20,34,989,219,463,232,176,9,782,396,58,933,827,840,701,639,314,319,789,84,278,903,831,284,568,941,306,87,16,175,656,654,732,250,74,57,277,734,789,462,253,622,910,493,401,990,895,916,139,380,139,611,184,102,390,590,323,669,135,290,220,143,391,783,914,434,457,137,882,181,507,978,696,754,122,670,827,601,417,568,444,373,619,894,490,600,529,403,967,192,22,282,739,101,933,526,298,543,335,444,367,402,234,597,348,403,522,714,427,662,985,68,446,51,852,449,532,432,186,417,580,80,368,413,823,407,685,451,545,422,884,612,941,29,785,167,466,308,467,576,890,106,810,675,192,411,139,562,829,455,577,695,59,151,679,454,838,662,874,251,406,800,708,897,775,62,197,875,161,924,968,670,713,452,84,177,471,446,291,701,605,343,191,512,367,343,275,662,233,558,710,114,682,374,14,452,640,168,834,82,263,20,243,926,133,918,860,894,915,585,420,920,434,442,529,372,814,780,916,895,84,711,141,963,54,139,751,61,392,128,699,498,556,216,920,61,53,703,288,962,89,396,461,529,561,430,218,349,384,587,950,549,330,865,79,274,938,343,87,675,985,199,612,644,954,126,228,923,812,152,138,871,72,465,661,740,592,670,32,119,116,171,961,284,904,884,986,86,397,919,981,419,615,322,296,544,605,349,337,464,21,367,684,170,492,674,786,373,623,200,570,506,68,493,840,645,870,333,786,20,964,461,326,498,523,854,704,893,38,273,29,498,541,911,597,171,415,747,534,772,127,69,429,686,215,826,893,904,348,825,822,589,833,819,528,47,863,6,858,264,28,281,287,925,648,417,903,12,272,838,739,586,72,882,292,312,747,508,946,994,483,222,391,309,316,96,185,129,355,565,529,347,479,979,851,213,744,720,377,55,943,537,36,64,312,458,422,302,190,81,554,923,552,842,419,939,756,687,950,451,145,613,643,10,499,207,677,112,585,396,984,609,304,142,710,703,181,617,807,500,692,505,806,396,259,953,117,538,183,299,98,575,284,888,329,700,646,46,639,396,737,694,557,669,856,134,959,426,902,251,12,778,758,514,266,108,104,666,780,970,290,461,983,351,299,421,805,77,189,732,794,309,322,369,941,689,742,871,31,625,392,1000,963,476,106,99,274,301,590,513,374,601,521,361,230,921,693,279,895,316,491,257,972,955,479,166,949,60,861,231,705,751,829,780,961,638,349,849,160,331,251,223,429,19,793,991,184,517,512,839,429,578,22,444,825,105,747,710,726,546,659,360,165,857,307,663,321,333,894,183,328,124,775,246,846,247,36,513,887,726,441,340,313,832,31,822,639,432,702,147,793,940,837,305,194,342,736,911,970,54,860,487,758,312,165,701,627,816,543,903,985,932,340,174,780,160,976,526,655,332,363,880,934,87,518,164,929,872,289,347,211,296,197,162,925,270,870,643,300,269,189,368,158,992,311,921,224,89,844,762,632,908,442,374,799,751,381,625,781,107,103,655,645,182,255,996,665,725,518,181,785,778,92,389,329,960,645,325,370,973,820,467,831,908,722,392,176,275,93,373,112,562,77,675,89,528,758,268,867,325,586,114,728,475,567,55,929,475,592,740,4,737,814,13,830,790,824,253,101,898,841,418,895,29,151,493,657,343,39,923,9,847,456,349,932,772,49,9,656,772,554,11,677,188,309,346,314,444,872,837,625,545,594,555,471,333,813,620,885,741,912,66,4,208,734,698,147,624,433,329,708,881,753,19,627,240,591,924,709,525,261,777,564,61,513,793,671,738,727,372,588,502,229,228,188,115,862,107,595,973,894,856,748,520,194,631,25,847,158,865,888,829,940,865,653,942,621,171,475,592,349,87,474,394,933,734,956,848,934,245,573,903,275,56,232,79,777,162,643,655,679,195,745,299,762,373,672,780,424,491,161,430,753,154,421,822,767,753,74,884,927,357,588,50,88,903,134,479,475,3,795,131,375,294,269,171,542,27,592,631,220,45,374,22,142,795,574,329,611,129,391,41,843,868,978,193,426,791,626,76,737,213,954,805,929,853,82,363,113,739,754,7,849,930,263,387,520,582,266,828,749,524,279,973,667,55,447,507,31,324,531,184,329,697,999,126,358,724,789,794,307,428,405,137,111,492,119,473,641,736,252,781,704,986,506,11,986,989,404,376,556,260,1000,197,647,479,528,500,733,60,114,286,138,105,310,860,506,824,110,358,220,286,634,854,764,737,310,382,570,413,213,794,702,737,467,725,155,585,244,687,585,550,459,53,239,4,833,543,511,941,850,593,224,466,88,552,960,46,983,943,295,414,951,738,737,782,405,145,858,963,484,261,327,737,583,92,840,982,358,180,662,182,643,828,184,676,482,435,684,422,960,372,437,710,716,410,172,311,475,118,919,612,42,206,287,929,232,131,366,710,547,133,91,709,366,382,321,295,568,635,156,32,150,925,726,971,767,943,985,909,251,167,704,45,236,960,343,441,44,881,705,432,274,568,713,118,326,416,85,885,523,743,750,413,958,447,227,93,56,472,159,862,115,416,211,35,391,564,908,456,329,810,596,735,843,514,61,130,185,722,555,345,964,654,444,97,714,785,406,882,257,769,174,750,374,518,796,105,39,5,47,749,51,147,543,216,510,972,386,853,90,655,768,188,51,67,256,158,118,112,302,246,483,103,449,914,533,255,729,901,597,298,824,807,407,452,378,644,841,730,656,13,122,483,174,532,664,80,769,540,111,716,96,402,839,904,612,210,477,193,433,58,781,459,513,816,802,6,279,112,147,690,75,205,680,594,582,393,16,50,183,522,469,20,222,923,118,355,158,323,95,490,206,111,442,981,106,251,382,926,2,287,281,724,22,341,155,295,391,243,148,694,945,964,369,621,681,540,357,873,61,396,740,780,333,114,346,464,782,735,155,889,699,229,293,549,957,644,14,820,894,458,428,475,198,808,362,498,983,240,123,914,63,75,909,766,870,25,494,422,827,282,809,103,376,591,230,169,23,475,176,755,928,870,486,413,22,928,567,122,660,959,414,362,49,667,972,613,952,526,20,251,821,957,413,707,589,720,398,433,15,647,28,775,284,145,860,114,313,831,585,352,796,498,269,194,329,907,467,465,921,913,235,855,400,19,526,95,380,413,15,427,512,628,578,579,637,565,715,566,746,364,24,565,217,576,109,718,188,9,34,744,441,135,813,169,980,464,947,67,501,617,251,338,272,175,904,862,227,726,142,773,972,235,582,878,104,743,227,189,319,665,278,340,275,194,899,232,12,578,603,839,976,103,863,17,918,126,810,708,532,673,546,813,157,561,410,763,535,376,264,364,889,235,692,751,881,613,143,797,380,672,530,229,719,571,765,562,76,475,855,234,758,981,786,464,351,411,328,258,303,490,544,590,972,687,552,130,109,47,711,256,85,969,526,634,680,577,52,723,528,59,550,115,196,490,334,700,310,727,303,313,209,938,754,660,592,442,985,192,875,674,761,607};//1,2,3,4,5,6
//        System.out.println(Arrays.toString(numsGame(nums)));
        System.out.println(Arrays.toString(numsGame2(nums)));
//        System.out.println(nums.length);
    }


    class Solution {
        public int[] numsGame(int[] nums) {
            int[] res = new int[nums.length];
            for (int i = 0; i < nums.length; i++) {

                for (int k = 0; k <= i; k++) {
                    int temp = 0;
                    for (int j = 0; j <= i; j++) {
                        temp += Math.abs(nums[j] - (nums[k] - (k - j)));
                    }
                    if (k == 0) {
                        res[i] = temp;
                    } else {
                        res[i] = Math.min(res[i], temp);
                    }
                }
                res[i] = res[i] % 1000000007;
            }
            return res;
        }
        public int[] numsGame1(int[] nums) {
            int[] res = new int[nums.length];
            int[] acc = new int[nums.length];
            for (int i = 0; i < nums.length; i++) {
                int temp = 0;
                for (int k = 0; k <= i; k++) {
                    // 应当利用上一步执行的结果
                    temp = i == 0 ? temp : acc[k];
                    // 只有第一次是循环，后面都只求第i个
                    for (int j = temp == 0 ? 0 : i; j <= i; j++) {
                        temp += Math.abs(nums[j] - (nums[k] - (k - j)));
                    }
                    acc[k] = temp;
                    if (k == 0) {
                        res[i] = temp;
                    } else {
                        res[i] = Math.min(res[i], temp);
                    }
                }
                res[i] = res[i] % 1000000007;
            }
            return res;
        }
    }
}
